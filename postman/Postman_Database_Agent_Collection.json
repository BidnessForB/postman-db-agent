{
	"info": {
		"_postman_id": "3a124514-752d-42fb-8738-6003ebc9f8bb",
		"name": "Database Agent API",
		"description": "# Database Agent API Collection\n\n## Overview\n\nThis collection provides comprehensive testing for the Node.js Database Agent API, a lightweight REST API for MySQL database access with stored procedure support. The agent allows you to execute SQL queries and stored procedures via HTTP endpoints, making it perfect for Postman testing and integration.\n\nThe requests and other assets are set up for use with the sample database, but you can use any database you like. See the [dbAgent documentation](https://github.com/BidnessForB/postman-db-agent/blob/main/README.md) to set up your agent.\n\n## Prerequisites\n\n### 1\\. Database Agent Setup\n\n- Ensure the Database Agent is running on `http://localhost:3000`\n    \n- Database must be configured and accessible\n    \n- For testing with sample data, use the included sample database setup\n    \n\n### 2\\. Database Configuration\n\n- **Default Database**: `users` (or your custom database name)\n    \n- **Required Tables**: [<code>user</code> and <code>address</code> (if using sample database)](https://github.com/BidnessForB/postman-db-agent/blob/main/db/README.md)\n    \n- **Stored Procedures**: 8 sample procedures available (if using sample database)\n    \n\n## Collection Structure\n\n### üè• Health Check\n\n- **Health Check** - Verify the Database Agent is running and responsive\n    \n\n### üîç Custom SQL Queries\n\n- **Execute Custom SQL** - Run any SQL query with optional parameters\n    \n- **Execute SQL with Parameters** - Parameterized queries for security\n    \n\n### üìä Stored Procedures\n\n- **Execute Stored Procedure** - Call MySQL stored procedures with parameters\n    - Sample procedures: `GetAllUsers`, `GetUserById`, `AddUser`, `AddUserWithAddress`, etc.\n        \n\n### ‚ùå Error Testing\n\n- **Test Invalid SQL** - Verify error handling for malformed SQL\n    \n- **Test Invalid Procedure** - Test non-existent stored procedures\n    \n- **Test Missing Procedure Name** - Validate required parameter handling\n    \n\n### üõ†Ô∏è Scripted Examples\n\n- **Raw script** - Direct implementation of database functions\n    \n- **As package** - Using the Postman package module\n    \n\n## API Endpoints\n\n### Health Check\n\n- **GET** `/health` - Check if the agent is running\n    \n- **Response**: Status, message, and timestamp\n    \n\n### Database Operations\n\n- **POST** `/api/query` - Execute custom SQL queries\n    - **Body**: `{\"query\": \"SELECT \\* FROM user\", \"params\": []}`\n        \n- **POST** `/api/procedure` - Execute stored procedures\n    - **Body**: `{\"procedure\": \"GetAllUsers\", \"params\": []}`\n        \n\n## Sample Database (Optional)\n\nIf using the included sample database, the following stored procedures are available:\n\n### User Management Procedures\n\n- **`AddUser(firstname, lastname, email)`** - Create new user\n    \n- **`AddUserWithAddress(...)`** - Create user with address\n    \n- **`UpdateUser(userid, firstname, lastname, email)`** - Update user\n    \n- **`UpdateUserAddress(...)`** - Update user and address\n    \n- **`DeleteUser(userid)`** - Delete user and address\n    \n- **`DeleteUserAddress(userid)`** - Delete address only\n    \n\n### Query Procedures\n\n- **`GetUserById(userid)`** - Get user by ID with address\n    \n- **`GetAllUsers()`** - Get all users with addresses\n    \n- **`SearchUsers(search_term)`** - Search users by name/email\n    \n\n## Response Format\n\n### Success Response\n\n``` json\n{\n  \"success\": true,\n  \"data\": [...],\n  \"count\": 5\n}\n\n ```\n\n### Error Response\n\n``` json\n{\n  \"success\": false,\n  \"error\": \"Error message\"\n}\n\n ```\n\n## Testing Workflow\n\n### 1\\. Start with Health Check\n\n- Verify the agent is running\n    \n- Check response time and status\n    \n\n### 2\\. Test Basic Queries\n\n- Execute simple SELECT queries\n    \n- Test parameterized queries\n    \n- Verify data retrieval\n    \n\n### 3\\. Test Stored Procedures\n\n- Call sample procedures (if using sample database)\n    \n- Test with different parameters\n    \n- Verify complex operations\n    \n\n### 4\\. Error Handling\n\n- Test invalid SQL syntax\n    \n- Test non-existent procedures\n    \n- Verify error responses\n    \n\n### 5\\. Performance Testing\n\n- Test with large result sets\n    \n- Monitor response times\n    \n- Check connection handling\n    \n\n## Environment Variables\n\nThe collection uses these variables:\n\n- **`base_url`** - API base URL (default: `http://localhost:3000`)\n    \n- **`queryResults`** - Store query results\n    \n- **`procResults`** - Store procedure results\n    \n\n## Scripted Testing\n\n### Raw Script Implementation\n\nThe collection includes direct implementations of:\n\n- `sendSQL(querySql)` - Execute SQL queries\n    \n- `execProcedure(procName, params)` - Execute stored procedures\n    \n\n### Package Module Usage\n\nFor advanced testing, use the included [Postman package](https://github.com/BidnessForB/postman-db-agent/blob/main/postman/postman-dbagent-package.js):\n\n``` javascript\nconst { sendSQL, execProcedure } = pm.require('@brkc-personal/get-custom-sql');\n\n ```\n\n## Best Practices\n\n### Security\n\n- Use parameterized queries to prevent SQL injection\n    \n- Validate input parameters\n    \n- Test error conditions thoroughly\n    \n\n### Performance\n\n- Limit result sets with appropriate WHERE clauses\n    \n- Use indexes for better query performance\n    \n- Monitor response times\n    \n\n### Testing\n\n- Test both success and error scenarios\n    \n- Verify data integrity\n    \n- Test with different data types and sizes\n    \n\n## Troubleshooting\n\n### Common Issues\n\n1. **Connection Refused** - Database Agent not running\n    \n2. **Database Error** - Invalid database configuration\n    \n3. **Procedure Not Found** - Stored procedures not installed\n    \n\n### Debug Steps\n\n1. Check Database Agent status with Health Check\n    \n2. Verify database connection in `.env` file\n    \n3. Test with simple SQL queries first\n    \n4. Check stored procedure installation\n    \n\n## Integration\n\nThis collection is designed to work with:\n\n- **Postman Runner** - Automated testing\n    \n- **Newman** - Command-line testing\n    \n- **CI/CD Pipelines** - Continuous integration\n    \n- **API Documentation** - Generate docs from collection\n    \n\n## Support\n\nFor issues or questions:\n\n- Check the project README.md\n    \n- Review database setup documentation\n    \n- Test with sample database first\n    \n- Verify all prerequisites are met\n    \n\n---\n\n**Note**: This collection is designed to work with the Node.js Database Agent. Ensure the agent is properly configured and running before executing tests.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34829850",
		"_collection_link": "https://brkc-personal.postman.co/workspace/DBAgent~66a6a7ec-c9c4-441e-972e-692ae7c1b2da/collection/34829850-3a124514-752d-42fb-8738-6003ebc9f8bb?action=share&source=collection_link&creator=34829850"
	},
	"item": [
		{
			"name": "Status",
			"item": [
				{
					"name": "Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/status",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"status"
							]
						},
						"description": "### Endpoint: GET /status\n\nThis endpoint is used to retrieve the current status of the application. It provides a simple way to check if the service is operational and to gather basic information about its state.\n\n#### Request Parameters\n\nThis endpoint does not require any request parameters.\n\n#### Expected Response\n\nThe response will be in JSON format and includes the following fields:\n\n- **status**: A string indicating the current status of the application.\n    \n- **message**: A string that may contain additional information or context related to the status.\n    \n- **timestamp**: A string representing the time at which the status was retrieved, typically in ISO 8601 format.\n    \n\n#### Example Response\n\n``` json\n{\n  \"status\": \"OK\",\n  \"message\": \"Service is running smoothly.\",\n  \"timestamp\": \"2023-10-01T12:00:00Z\"\n}\n\n ```\n\n#### Notes\n\n- This endpoint is useful for health checks and monitoring the application's availability.\n    \n- Ensure that the service is running before making this request to receive a valid response."
					},
					"response": [
						{
							"name": "200 Status",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/health",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								},
								{
									"key": "Content-Length",
									"value": "92"
								},
								{
									"key": "ETag",
									"value": "W/\"5c-Fuugeq2Mk5hDyk1XCJSZufKcs28\""
								},
								{
									"key": "Date",
									"value": "Fri, 24 Oct 2025 02:42:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"ok\",\n    \"message\": \"Database agent is running\",\n    \"timestamp\": \"2025-10-24T02:42:24.443Z\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Custom SQL Queries",
			"item": [
				{
					"name": "Execute Custom SQL",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"SELECT * FROM user \",\n  \"params\": []\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/query",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"query"
							]
						},
						"description": "### API Endpoint: Query Data\n\nThis endpoint allows you to execute a SQL query against the database and retrieve the results. It is particularly useful for fetching user data based on specific criteria.\n\n#### Request\n\n- **Method**: POST\n    \n- **URL**: `http://localhost:3000/api/query`\n    \n- **Content-Type**: application/json\n    \n\n##### Request Body\n\nThe request body must be in JSON format and should contain the following parameters:\n\n- `query` (string): The SQL query string to be executed. For example, you might use a query like `\"SELECT \\* FROM user WHERE first ...\"` to fetch user details.\n    \n- `params` (array of strings): An array of parameters to be used in the SQL query. For instance, `[\"Sarah\"]` can be used to filter results based on the first name.\n    \n\nExample of a request body:\n\n``` json\n{\n  \"query\": \"SELECT * FROM user WHERE first ...\",\n  \"params\": [\"Sarah\"]\n}\n\n ```\n\n#### Response\n\nUpon successful execution, the API will return a response in JSON format with the following structure:\n\n- `success` (boolean): Indicates whether the query execution was successful.\n    \n- `data` (array of objects): Contains the results of the query. Each object in the array represents a user and includes fields such as `userid`, `firstname`, `lastname`, `email`, `created_at`, and `updated_at`.\n    \n- `count` (integer): The number of records returned by the query.\n    \n\nExample of a response:\n\n``` json\n{\n  \"success\": true,\n  \"data\": [\n    {\n      \"userid\": 0,\n      \"firstname\": \"\",\n      \"lastname\": \"\",\n      \"email\": \"\",\n      \"created_at\": \"\",\n      \"updated_at\": \"\"\n    }\n  ],\n  \"count\": 0\n}\n\n ```\n\nThis structure allows you to easily interpret the results of your query and handle them in your application."
					},
					"response": [
						{
							"name": "200 Execute Custom SQL",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": \"SELECT * FROM user LIMIT 5\",\n  \"params\": []\n}"
								},
								"url": {
									"raw": "http://localhost:3000/api/query",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"query"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								},
								{
									"key": "Content-Length",
									"value": "863"
								},
								{
									"key": "ETag",
									"value": "W/\"35f-k9ZUvf57VAFWWa6ZoGLTWBsshLs\""
								},
								{
									"key": "Date",
									"value": "Fri, 24 Oct 2025 02:42:35 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": [\n        {\n            \"userid\": 1,\n            \"firstname\": \"John\",\n            \"lastname\": \"Smith\",\n            \"email\": \"john.smith@email.com\",\n            \"created_at\": \"2025-10-24T02:02:24.000Z\",\n            \"updated_at\": \"2025-10-24T02:02:24.000Z\"\n        },\n        {\n            \"userid\": 2,\n            \"firstname\": \"Sarah\",\n            \"lastname\": \"Johnson\",\n            \"email\": \"sarah.johnson@email.com\",\n            \"created_at\": \"2025-10-24T02:02:24.000Z\",\n            \"updated_at\": \"2025-10-24T02:02:24.000Z\"\n        },\n        {\n            \"userid\": 3,\n            \"firstname\": \"Michael\",\n            \"lastname\": \"Brown\",\n            \"email\": \"michael.brown@email.com\",\n            \"created_at\": \"2025-10-24T02:02:24.000Z\",\n            \"updated_at\": \"2025-10-24T02:02:24.000Z\"\n        },\n        {\n            \"userid\": 4,\n            \"firstname\": \"Emily\",\n            \"lastname\": \"Davis\",\n            \"email\": \"emily.davis@email.com\",\n            \"created_at\": \"2025-10-24T02:02:24.000Z\",\n            \"updated_at\": \"2025-10-24T02:02:24.000Z\"\n        },\n        {\n            \"userid\": 5,\n            \"firstname\": \"David\",\n            \"lastname\": \"Wilson\",\n            \"email\": \"david.wilson@email.com\",\n            \"created_at\": \"2025-10-24T02:02:24.000Z\",\n            \"updated_at\": \"2025-10-24T02:02:24.000Z\"\n        }\n    ],\n    \"count\": 5\n}"
						},
						{
							"name": "200 Execute SQL with Parameters",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": \"SELECT * FROM user WHERE firstname = ?\",\n  \"params\": [\"Sarah\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/query",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"query"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								},
								{
									"key": "Content-Length",
									"value": "197"
								},
								{
									"key": "ETag",
									"value": "W/\"c5-q6q2nHBRP1SzovGm7iYGUQN6MC4\""
								},
								{
									"key": "Date",
									"value": "Fri, 24 Oct 2025 02:42:45 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": [\n        {\n            \"userid\": 1,\n            \"firstname\": \"John\",\n            \"lastname\": \"Smith\",\n            \"email\": \"john.smith@email.com\",\n            \"created_at\": \"2025-10-24T02:02:24.000Z\",\n            \"updated_at\": \"2025-10-24T02:02:24.000Z\"\n        }\n    ],\n    \"count\": 1\n}"
						}
					]
				}
			]
		},
		{
			"name": "Stored Procedures",
			"item": [
				{
					"name": "Execute Stored Procedure",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"procedure\": \"AddUserWithAddress\",\n  \"params\": [\"Jehosephat\", \"Murphy\", \"jmurphy@aol.com\", \"123 Test St\", \"Test City\", \"TS\", \"12345\", \"USA\"]\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/procedure",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"procedure"
							]
						},
						"description": "## API Endpoint: Add Procedure\n\nThis endpoint is used to execute a specified procedure on the server. The current implementation supports adding a user with their associated address details.\n\n### Request\n\n- **Method**: POST\n    \n- **URL**: `http://localhost:3000/api/procedure`\n    \n- **Content-Type**: application/json\n    \n\n#### Request Body\n\nThe request body should be in JSON format and must contain the following parameters:\n\n- **procedure** (string): The name of the procedure to be executed. For adding a user, this should be set to `\"AddUserWithAddress\"`.\n    \n- **params** (array of strings): An array containing the parameters required for the procedure. In this case, it includes the user's first name.\n    \n\n**Example Request Body**:\n\n``` json\n{\n  \"procedure\": \"AddUserWithAddress\",\n  \"params\": [\"Fred\"]\n}\n\n ```\n\n### Response\n\nThe response will be returned in JSON format and will include the following fields:\n\n- **success** (boolean): Indicates whether the operation was successful.\n    \n- **data** (array): Contains the result of the procedure execution. The structure may vary based on the operation performed:\n    \n    - For adding a user, it may return user details or a confirmation of the new user ID.\n        \n    - { \"userid\": 0, \"firstname\": \"\", \"lastname\": \"\", \"email\": \"\", \"created_at\": \"\", \"addressid\": 0, \"street\": \"\", \"city\": \"\", \"state\": \"\", \"zipcode\": \"\", \"country\": \"\"}\n        \n    - { \"new_user_id\": 0}\n        \n- **count** (integer): Represents the number of records returned in the response.\n    \n- **procedure** (string): Echoes the procedure name that was executed.\n    \n\n### Notes\n\n- Ensure that appropriate authentication headers are included if required by your API setup.\n    \n- The request must be sent with the correct `Content-Type` header set to `application/json` to ensure proper handling of the request body."
					},
					"response": [
						{
							"name": "200 GetUserById",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"procedure\": \"GetUserById\",\n  \"params\": [1]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/procedure",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"procedure"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								},
								{
									"key": "Content-Length",
									"value": "399"
								},
								{
									"key": "ETag",
									"value": "W/\"18f-0pKtvttaU0yAKIIsDIb6IMhD2rY\""
								},
								{
									"key": "Date",
									"value": "Fri, 24 Oct 2025 02:21:56 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": [\n        [\n            {\n                \"userid\": 1,\n                \"firstname\": \"John\",\n                \"lastname\": \"Smith\",\n                \"email\": \"john.smith@email.com\",\n                \"created_at\": \"2025-10-24T02:02:24.000Z\",\n                \"addressid\": 1,\n                \"street\": \"123 Main Street\",\n                \"city\": \"New York\",\n                \"state\": \"NY\",\n                \"zipcode\": \"10001\",\n                \"country\": \"USA\"\n            }\n        ],\n        {\n            \"fieldCount\": 0,\n            \"affectedRows\": 0,\n            \"insertId\": 0,\n            \"info\": \"\",\n            \"serverStatus\": 2,\n            \"warningStatus\": 0,\n            \"changedRows\": 0\n        }\n    ],\n    \"count\": 2,\n    \"procedure\": \"GetUserById\"\n}"
						},
						{
							"name": "200 CreateUserWithAddress",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"procedure\": \"AddUserWithAddress\",\n  \"params\": [\"Fred\", \"Gill\", \"fred.gill@yahoo.com\", \"123 Test St\", \"Test City\", \"TS\", \"12345\", \"USA\"]\n}"
								},
								"url": {
									"raw": "http://localhost:3000/api/procedure",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"procedure"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								},
								{
									"key": "Content-Length",
									"value": "200"
								},
								{
									"key": "ETag",
									"value": "W/\"c8-tQ4qYsmpDXeKCm475l/OAEFPgQk\""
								},
								{
									"key": "Date",
									"value": "Fri, 24 Oct 2025 02:25:12 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"data\": [\n        [\n            {\n                \"new_user_id\": 9\n            }\n        ],\n        {\n            \"fieldCount\": 0,\n            \"affectedRows\": 0,\n            \"insertId\": 0,\n            \"info\": \"\",\n            \"serverStatus\": 16386,\n            \"warningStatus\": 0,\n            \"changedRows\": 0\n        }\n    ],\n    \"count\": 2,\n    \"procedure\": \"AddUserWithAddress\"\n}"
						},
						{
							"name": "500 CreateUserWithAddress Copy",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"procedure\": \"AddUserWithAddress\",\n  \"params\": \"foo\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/procedure",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"procedure"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								},
								{
									"key": "Content-Length",
									"value": "200"
								},
								{
									"key": "ETag",
									"value": "W/\"c8-tQ4qYsmpDXeKCm475l/OAEFPgQk\""
								},
								{
									"key": "Date",
									"value": "Fri, 24 Oct 2025 02:25:12 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"error\": \"Duplicate entry 'fred.gill@yahoo.com' for key 'user.email'\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Error Testing",
			"item": [
				{
					"name": "Test Invalid SQL",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"SELECT * FROM nonexistent_table\",\n  \"params\": []\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/query",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"query"
							]
						}
					},
					"response": [
						{
							"name": "500 Test Invalid SQL",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"query\": \"SELECT * FROM nonexistent_table\",\n  \"params\": []\n}"
								},
								"url": {
									"raw": "http://localhost:3000/api/query",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"query"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								},
								{
									"key": "Content-Length",
									"value": "73"
								},
								{
									"key": "ETag",
									"value": "W/\"49-7Rn6puPad7Vju9vWXf+S6K/sOQo\""
								},
								{
									"key": "Date",
									"value": "Fri, 24 Oct 2025 02:41:48 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"error\": \"Table 'users.nonexistent_table' doesn't exist\"\n}"
						}
					]
				},
				{
					"name": "Test Invalid Procedure",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"procedure\": \"NonExistentProcedure\",\n  \"params\": []\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/procedure",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"procedure"
							]
						}
					},
					"response": [
						{
							"name": "500 Test Invalid Procedure",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"procedure\": \"NonExistentProcedure\",\n  \"params\": []\n}"
								},
								"url": {
									"raw": "http://localhost:3000/api/procedure",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"procedure"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								},
								{
									"key": "Content-Length",
									"value": "79"
								},
								{
									"key": "ETag",
									"value": "W/\"4f-62s1hP/aJhnRNVLJ9hS1qdNkAkY\""
								},
								{
									"key": "Date",
									"value": "Fri, 24 Oct 2025 02:42:08 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"error\": \"PROCEDURE users.NonExistentProcedure does not exist\"\n}"
						}
					]
				},
				{
					"name": "Test Missing Procedure Name",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"params\": []\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/procedure",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"procedure"
							]
						}
					},
					"response": [
						{
							"name": "500 Test Missing Procedure Name",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"params\": []\n}"
								},
								"url": {
									"raw": "http://localhost:3000/api/procedure",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"procedure"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								},
								{
									"key": "Content-Length",
									"value": "54"
								},
								{
									"key": "ETag",
									"value": "W/\"36-9NLBKaJaXzJJ03voUOzl9Ab8IJg\""
								},
								{
									"key": "Date",
									"value": "Fri, 24 Oct 2025 02:42:17 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"error\": \"Procedure name is required\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Scripted",
			"item": [
				{
					"name": "Raw script",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * Database Agent Postman Package",
									" * ",
									" * This package provides utility functions to interact with the database agent",
									" * from within Postman scripts. It encapsulates the HTTP requests to the",
									" * database agent API endpoints.",
									" * ",
									" * Prerequisites:",
									" * - Database agent must be running on http://localhost:3000",
									" * - Database must be set up with the required schema and stored procedures",
									" * ",
									" * Available Functions:",
									" * - sendSQL(querySql) - Execute custom SQL queries",
									" * - execProcedure(procName, params) - Execute stored procedures",
									" * ",
									" * @author Database Agent Team",
									" * @version 1.0.0",
									" */",
									"",
									"/**",
									" * Sends a SQL query to the database agent",
									" * ",
									" * @param {Object} querySql - The SQL query object",
									" * @param {string} querySql.query - The SQL query string",
									" * @param {Array} querySql.params - Array of parameters for the query (optional)",
									" * ",
									" * @returns {Promise<Object>} Promise that resolves with the query results",
									" * ",
									" * @example",
									" * // Simple SELECT query",
									" * const query = {",
									" *     \"query\": \"SELECT * FROM user LIMIT 5\",",
									" *     \"params\": []",
									" * };",
									" * const results = await sendSQL(query);",
									" * ",
									" * @example",
									" * // Parameterized query",
									" * const query = {",
									" *     \"query\": \"SELECT * FROM user WHERE userid = ?\",",
									" *     \"params\": [1]",
									" * };",
									" * const results = await sendSQL(query);",
									" */",
									"function sendSQL(querySql) {",
									"",
									"    const request = {",
									"        url: \"http://localhost:3000/api/query\",",
									"        method: \"POST\",",
									"        header: {",
									"            \"Content-Type\": \"application/json\"",
									"        },",
									"        body: {",
									"            mode: \"raw\",",
									"            raw: JSON.stringify(",
									"                querySql",
									"",
									"",
									"            )",
									"        }",
									"    }",
									"",
									"",
									"",
									"    return new Promise((resolve, reject) => {",
									"        try {",
									"            pm.sendRequest(request, (error, response) => {",
									"                if (error) { //dbAgent not running, probably",
									"                    //console.log('sendSQL request error:', error.message);",
									"                    reject(error);",
									"                }",
									"                else {",
									"",
									"                    try {",
									"                        response.json();",
									"",
									"                    } catch (parseErr) {",
									"                        //console.log('sendSQL response parse error:', parseErr);",
									"                        reject(parseErr);",
									"                    }",
									"                    if (response?.code && response.code !== 200) {",
									"                        //console.log('sendSQL non-OK status:', response.json());",
									"                        reject('Request failed with status ' + response.code + ' ' + JSON.stringify(response.json()));",
									"                    }",
									"                    else if (response?.code === 200 && !response.success === 'true') {",
									"                        //console.log(\"SQL error: \", response.json());",
									"                        reject(response.json());",
									"                    }",
									"                    else {",
									"                        //console.log(\"All good\")",
									"                        resolve(response.json());",
									"                    }",
									"                }",
									"",
									"            });",
									"        } catch (err) {",
									"            //console.log.log('sendSQL unexpected error:', err);",
									"            reject('Unexpected error' + err.message);",
									"        }",
									"",
									"    });",
									"",
									"}",
									"",
									"/**",
									" * Executes a stored procedure through the database agent",
									" * ",
									" * @param {string} procName - The name of the stored procedure to execute",
									" * @param {Array} params - Array of parameters to pass to the stored procedure",
									" * ",
									" * @returns {Promise<Object>} Promise that resolves with the procedure results",
									" * ",
									" * @example",
									" * // Get all users",
									" * const results = await execProcedure(\"GetAllUsers\", []);",
									" * ",
									" * @example",
									" * // Get user by ID",
									" * const results = await execProcedure(\"GetUserById\", [1]);",
									" * ",
									" * @example",
									" * // Add a new user",
									" * const results = await execProcedure(\"AddUser\", [\"John\", \"Doe\", \"john.doe@email.com\"]);",
									" * ",
									" * @example",
									" * // Update user with address",
									" * const results = await execProcedure(\"UpdateUserAddress\", [",
									" *     1, \"John\", \"Smith\", \"john.smith@email.com\",",
									" *     \"123 Main St\", \"New York\", \"NY\", \"10001\", \"USA\"",
									" * ]);",
									" */",
									"function execProcedure(procName, params) {",
									"    return new Promise((resolve, reject) => {",
									"    const body = {",
									"        \"procedure\": procName",
									"    }",
									"    if (params && Array.isArray(params)) {",
									"        body.params = params;",
									"    }",
									"    else if(params) {",
									"        console.log(\"Problem with params: \", params)",
									"        reject(new Error(\"Invalid params: \" + params));",
									"        return;",
									"        ",
									"    }",
									"    const request = {",
									"        url: \"http://localhost:3000/api/procedure\",",
									"        method: \"POST\",",
									"        header: {",
									"            \"Content-Type\": \"application/json\"",
									"        },",
									"        body: {",
									"            mode: \"raw\",",
									"            raw: JSON.stringify(",
									"                body",
									"            )",
									"        }",
									"    }",
									"",
									"",
									"",
									"    ",
									"        pm.sendRequest(request, (error, response) => {",
									"            //console.log(error, response);",
									"            if (error) { //dbAgent not running, probably",
									"                    //console.log('execProcedure request error:', error.message);",
									"                    reject(error);",
									"                }",
									"            else if (response?.code != 200) {",
									"                //console.log('execProcedure non-200:', response.json());",
									"                reject(new Error(JSON.stringify(response.json())));",
									"                return;",
									"            }",
									"            else {",
									"",
									"                    try {",
									"                        response.json();",
									"",
									"                    } catch (parseErr) {",
									"                        //console.log('sendSQL response parse error:', parseErr);",
									"                        reject(parseErr);",
									"                    }",
									"                    if (response?.code && response.code !== 200) {",
									"                        //console.log('execProcedure non-OK status:', response.json());",
									"                        reject('Request failed with status ' + response.code + ' ' + JSON.stringify(response.json()));",
									"                    }",
									"                    else if (response?.code === 200 && !response.success === 'true') {",
									"                        //console.log(\"SQL error: \", response.json());",
									"                        reject(response.json());",
									"                    }",
									"                    else {",
									"                        //console.log(\"All good\", error)",
									"                        resolve(response.json());",
									"                    }",
									"                }",
									"        });",
									"        ",
									"",
									"    });",
									"",
									"}",
									"",
									"",
									"",
									"",
									"const query = {",
									"    \"query\": \"SELECT * FROM user LIMIT 5\"",
									"};",
									"",
									"sendSQL(query)",
									"    .then((res, err) => {",
									"        if (err) {",
									"            console.log(\"sendSQL Error: \", err);",
									"        }",
									"        else if (res) {",
									"            console.log(\"sendSQL: \", res)",
									"        }",
									"    })",
									"    .catch((err) => {",
									"        console.log(\"ERROR!! \")",
									"    });",
									"",
									"",
									"",
									"/*const params = [\"Mike\", \"Meyers\", \"scary@yahoo.com\", \"123 Test St\", \"Test City\", \"TS\", \"12345\", \"USA\"];",
									"//const params = \"foo\";",
									"const procName = \"addUserWithAddress\"",
									"execProcedure(procName, params)",
									"    .then((results) => {",
									"        console.log('execProcedure: ', results);",
									"    })",
									"    .catch((err) => {",
									"        console.error('execProcedure error: ', err);",
									"    });",
									"    */"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://postman-echo.com/get",
							"protocol": "http",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						},
						"description": "## Using dbAgent in scripts\n\nThis is a sample request showing how to encapsulate dbAgent functionality in test script functions. The request itself does nothing."
					},
					"response": []
				},
				{
					"name": "As package",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const {sendSQL, execProcedure} = pm.require('@brkc-personal/get-custom-sql');",
									"",
									"",
									"",
									"query = {",
									"    \"query\": \"SELECT * FROM user LIMIT 5\",",
									"    \"params\": []",
									"}",
									"",
									"sendSQL(query)",
									"    .then((res, err) => {",
									"        if (err) {",
									"            console.log(\"sendSQL Error: \", err);",
									"        }",
									"        else if (res) {",
									"            console.log(\"sendSQL: \", res)",
									"        }",
									"    })",
									"    .catch((err) => {",
									"        console.log(\"ERROR!! \")",
									"    });",
									"",
									"const procName = \"GetUserById\";",
									"const params = [1];",
									"",
									"execProcedure(procName, params, 'procResults').then((res, err) => {",
									"    console.log('execProcedure: ', res, err);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {
									"@brkc-personal/get-custom-sql": {
										"id": "019a1430-59e8-707c-9dd2-8c000fa39d13"
									}
								},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://postman-echo.com/get",
							"protocol": "http",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000"
		},
		{
			"key": "procResults",
			"value": ""
		},
		{
			"key": "queryResults",
			"value": ""
		}
	]
}